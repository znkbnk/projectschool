{
  "@context": "https://schema.org",
  "@type": "ItemList",
  "name": "React Quiz Catalog",
  "description": "A comprehensive collection of React quizzes to test your knowledge on React topics.",
  "numberOfItems": 60,
  "itemListElement": [
    {
      "@type": "Question",
      "name": "What is React.js?",
      "text": "What is React.js?",
      "url": "https://projectschool.dev/quiz/what-is-react",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "A library for building user interfaces"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "A backend framework for databases"
        },
        {
          "@type": "Answer",
          "text": "A library for performing server-side operations"
        },
        {
          "@type": "Answer",
          "text": "A language used for creating APIs"
        }
      ],
      "keywords": [
        "React.js",
        "React introduction",
        "React library",
        "UI development"
      ],
      "seoMeta": {
        "seoTitle": "What is React.js? - Learn About React",
        "seoDescription": "Discover what React.js is and how it helps developers build dynamic and efficient user interfaces.",
        "seoKeywords": [
          "React.js",
          "React introduction",
          "React library",
          "UI development"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the Virtual DOM?",
      "text": "What is the Virtual DOM?",
      "url": "https://projectschool.dev/quiz/what-is-the-virtual-dom",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "A lightweight copy of the real DOM used by React"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "A physical part of the browser's DOM"
        },
        {
          "@type": "Answer",
          "text": "A feature to fetch data from servers"
        },
        {
          "@type": "Answer",
          "text": "A debugging tool for React developers"
        }
      ],
      "keywords": [
        "Virtual DOM",
        "React DOM",
        "React optimization",
        "UI rendering"
      ],
      "seoMeta": {
        "seoTitle": "What is the Virtual DOM? - React Quiz Question",
        "seoDescription": "Learn about the Virtual DOM and how React uses it to optimize UI rendering and performance.",
        "seoKeywords": [
          "Virtual DOM",
          "React DOM",
          "React optimization",
          "UI rendering"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is JSX?",
      "text": "What is JSX?",
      "url": "https://projectschool.dev/quiz/what-is-jsx",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "A syntax extension that allows writing HTML in React"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "A special syntax to describe CSS styles"
        },
        {
          "@type": "Answer",
          "text": "A library used to optimize JavaScript code"
        },
        {
          "@type": "Answer",
          "text": "A template engine used for server-side rendering"
        }
      ],
      "keywords": ["JSX", "React JSX", "React syntax", "HTML in React"],
      "seoMeta": {
        "seoTitle": "Understanding JSX - React Quiz",
        "seoDescription": "Explore JSX, a syntax extension in React that combines HTML and JavaScript seamlessly.",
        "seoKeywords": ["JSX", "React JSX", "React syntax", "HTML in React"]
      }
    },
    {
      "@type": "Question",
      "name": "What are functional components in React?",
      "text": "What are functional components in React?",
      "url": "https://projectschool.dev/quiz/functional-components-in-react",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Functions that take props and return React elements"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Components defined using ES6 classes"
        },
        {
          "@type": "Answer",
          "text": "Functions that directly manipulate the DOM"
        },
        {
          "@type": "Answer",
          "text": "Components that don't use any hooks"
        }
      ],
      "keywords": [
        "functional components",
        "React basics",
        "props in React",
        "React UI"
      ],
      "seoMeta": {
        "seoTitle": "What are Functional Components? - React Basics",
        "seoDescription": "Understand functional components in React and how they simplify building reusable UI elements.",
        "seoKeywords": [
          "functional components",
          "React basics",
          "props in React",
          "React UI"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the purpose of the useEffect hook?",
      "text": "What is the purpose of the useEffect hook?",
      "url": "https://projectschool.dev/quiz/useeffect-hook",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To manage side effects like fetching data or updating the DOM"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To handle user input in forms"
        },
        {
          "@type": "Answer",
          "text": "To update the component state"
        },
        {
          "@type": "Answer",
          "text": "To render a list of items in React"
        }
      ],
      "keywords": [
        "useEffect",
        "React hooks",
        "side effects",
        "API calls in React"
      ],
      "seoMeta": {
        "seoTitle": "Understanding useEffect Hook - React Quiz",
        "seoDescription": "Learn about the useEffect hook in React and how it manages side effects such as API calls and DOM updates.",
        "seoKeywords": [
          "useEffect",
          "React hooks",
          "side effects",
          "API calls in React"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the purpose of React props?",
      "text": "What is the purpose of React props?",
      "url": "https://projectschool.dev/quiz/react-props",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To pass data between components"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To manage component state"
        },
        {
          "@type": "Answer",
          "text": "To define styles for components"
        },
        {
          "@type": "Answer",
          "text": "To create new components"
        }
      ],
      "keywords": [
        "React props",
        "data sharing",
        "props in React",
        "React components"
      ],
      "seoMeta": {
        "seoTitle": "React Props - Data Sharing in React",
        "seoDescription": "Discover how React props allow data sharing between components and enable dynamic UI updates.",
        "seoKeywords": [
          "React props",
          "data sharing",
          "props in React",
          "React components"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What does React useState hook do?",
      "text": "What does React useState hook do?",
      "url": "https://projectschool.dev/quiz/usestate-hook",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Declares state in functional components"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Manages the lifecycle of a component"
        },
        {
          "@type": "Answer",
          "text": "Fetches data from an API"
        },
        {
          "@type": "Answer",
          "text": "Handles user interactions"
        }
      ],
      "keywords": [
        "useState",
        "React state",
        "functional components",
        "React hooks"
      ],
      "seoMeta": {
        "seoTitle": "React useState Hook - Manage Component State",
        "seoDescription": "Learn about the useState hook in React, which allows you to declare and manage state in functional components.",
        "seoKeywords": [
          "useState",
          "React state",
          "functional components",
          "React hooks"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is a React component?",
      "text": "What is a React component?",
      "url": "https://projectschool.dev/quiz/what-is-a-react-component",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "A reusable piece of UI"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "A function to fetch data"
        },
        {
          "@type": "Answer",
          "text": "A tool for debugging"
        },
        {
          "@type": "Answer",
          "text": "A method to directly manipulate the DOM"
        }
      ],
      "keywords": [
        "React components",
        "UI components",
        "React basics",
        "Reusable UI"
      ],
      "seoMeta": {
        "seoTitle": "What is a React Component? - React Quiz",
        "seoDescription": "Discover what React components are and how they form the building blocks of React applications.",
        "seoKeywords": [
          "React components",
          "UI components",
          "React basics",
          "Reusable UI"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is React Router used for?",
      "text": "What is React Router used for?",
      "url": "https://projectschool.dev/quiz/what-is-react-router-used-for",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To manage navigation and routing in React applications"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To style React components"
        },
        {
          "@type": "Answer",
          "text": "To handle user input in forms"
        },
        {
          "@type": "Answer",
          "text": "To optimize performance of React apps"
        }
      ],
      "keywords": [
        "React Router",
        "navigation in React",
        "routing in React",
        "React quiz"
      ],
      "seoMeta": {
        "seoTitle": "React Router - Navigation and Routing",
        "seoDescription": "Learn how React Router helps manage navigation and routing in modern React applications.",
        "seoKeywords": [
          "React Router",
          "navigation in React",
          "routing in React",
          "React quiz"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What does the React useRef hook do?",
      "text": "What does the React useRef hook do?",
      "url": "https://projectschool.dev/quiz/what-does-react-useref-hook-do",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Accesses or stores a mutable DOM reference"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Updates the component state"
        },
        {
          "@type": "Answer",
          "text": "Manages side effects"
        },
        {
          "@type": "Answer",
          "text": "Defines default props for components"
        }
      ],
      "keywords": ["useRef", "DOM references", "React hooks", "React DOM"],
      "seoMeta": {
        "seoTitle": "React useRef Hook - Manage DOM References",
        "seoDescription": "Understand how the useRef hook in React allows you to access or store mutable references to DOM elements.",
        "seoKeywords": ["useRef", "DOM references", "React hooks", "React DOM"]
      }
    },
    {
      "@type": "Question",
      "name": "What is the React Context API used for?",
      "text": "What is the React Context API used for?",
      "url": "https://projectschool.dev/quiz/what-is-react-context-api-used-for",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To share state or data across components without props drilling"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To manage complex animations"
        },
        {
          "@type": "Answer",
          "text": "To perform API calls"
        },
        {
          "@type": "Answer",
          "text": "To optimize the performance of React apps"
        }
      ],
      "keywords": ["Context API", "React state", "global state", "React hooks"],
      "seoMeta": {
        "seoTitle": "React Context API - Share State Across Components",
        "seoDescription": "Learn how the React Context API allows sharing state or data across components without the need for props drilling.",
        "seoKeywords": [
          "Context API",
          "React state",
          "global state",
          "React hooks"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What are React fragments?",
      "text": "What are React fragments?",
      "url": "https://projectschool.dev/quiz/what-are-react-fragments",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Lightweight containers for grouping multiple elements"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Tools for debugging React code"
        },
        {
          "@type": "Answer",
          "text": "Built-in hooks for managing state"
        },
        {
          "@type": "Answer",
          "text": "Components that handle user authentication"
        }
      ],
      "keywords": [
        "React fragments",
        "grouping elements",
        "React components",
        "JSX"
      ],
      "seoMeta": {
        "seoTitle": "React Fragments - Grouping Elements Without Adding Extra Nodes",
        "seoDescription": "Understand how React fragments allow you to group multiple elements without introducing unnecessary DOM nodes.",
        "seoKeywords": [
          "React fragments",
          "grouping elements",
          "React components",
          "JSX"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the key prop in React used for?",
      "text": "What is the key prop in React used for?",
      "url": "https://projectschool.dev/quiz/what-is-the-key-prop-in-react-used-for",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To uniquely identify elements in a list"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To style components"
        },
        {
          "@type": "Answer",
          "text": "To bind event listeners"
        },
        {
          "@type": "Answer",
          "text": "To pass data between components"
        }
      ],
      "keywords": [
        "React key",
        "list rendering",
        "React components",
        "React performance"
      ],
      "seoMeta": {
        "seoTitle": "React Key Prop - Identifying List Elements Uniquely",
        "seoDescription": "Learn how the key prop in React helps uniquely identify elements in a list for efficient rendering and updating.",
        "seoKeywords": [
          "React key",
          "list rendering",
          "React components",
          "React performance"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What does the useReducer hook do?",
      "text": "What does the useReducer hook do?",
      "url": "https://projectschool.dev/quiz/what-does-the-usereducer-hook-do",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Manages complex state logic in functional components"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Updates the DOM directly"
        },
        {
          "@type": "Answer",
          "text": "Handles form submissions"
        },
        {
          "@type": "Answer",
          "text": "Performs API requests"
        }
      ],
      "keywords": [
        "useReducer",
        "state management",
        "React hooks",
        "functional components"
      ],
      "seoMeta": {
        "seoTitle": "React useReducer Hook - Managing Complex State Logic",
        "seoDescription": "Explore how the useReducer hook in React manages complex state logic in functional components.",
        "seoKeywords": [
          "useReducer",
          "state management",
          "React hooks",
          "functional components"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is React.memo used for?",
      "text": "What is React.memo used for?",
      "url": "https://projectschool.dev/quiz/what-is-react-memo-used-for",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To prevent unnecessary re-renders of functional components"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To fetch data from an API"
        },
        {
          "@type": "Answer",
          "text": "To memoize values returned by hooks"
        },
        {
          "@type": "Answer",
          "text": "To define default props"
        }
      ],
      "keywords": [
        "React.memo",
        "performance optimization",
        "React re-renders",
        "React hooks"
      ],
      "seoMeta": {
        "seoTitle": "React.memo - Prevent Unnecessary Re-renders",
        "seoDescription": "Understand how React.memo optimizes performance by preventing unnecessary re-renders of functional components.",
        "seoKeywords": [
          "React.memo",
          "performance optimization",
          "React re-renders",
          "React hooks"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is prop drilling in React?",
      "text": "What is prop drilling in React?",
      "url": "https://projectschool.dev/quiz/what-is-prop-drilling",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Passing props down multiple levels of components"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "A debugging technique"
        },
        {
          "@type": "Answer",
          "text": "A method to fetch data from an API"
        },
        {
          "@type": "Answer",
          "text": "A feature for optimizing performance"
        }
      ],
      "keywords": [
        "prop drilling",
        "React components",
        "state management",
        "React props"
      ],
      "seoMeta": {
        "seoTitle": "Prop Drilling in React - Passing Props Through Multiple Components",
        "seoDescription": "Learn about prop drilling in React and how it involves passing props down multiple levels of components.",
        "seoKeywords": [
          "prop drilling",
          "React components",
          "state management",
          "React props"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the purpose of React state?",
      "text": "What is the purpose of React state?",
      "url": "https://projectschool.dev/quiz/what-is-react-state",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To manage dynamic data within a component"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To define reusable styles"
        },
        {
          "@type": "Answer",
          "text": "To access DOM elements"
        },
        {
          "@type": "Answer",
          "text": "To create new components"
        }
      ],
      "keywords": [
        "React state",
        "state management",
        "dynamic data",
        "React components"
      ],
      "seoMeta": {
        "seoTitle": "React State - Managing Dynamic Data Within Components",
        "seoDescription": "Understand how React state allows you to manage dynamic data within components, enabling interactivity.",
        "seoKeywords": [
          "React state",
          "state management",
          "dynamic data",
          "React components"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What does React.StrictMode do?",
      "text": "What does React.StrictMode do?",
      "url": "https://projectschool.dev/quiz/what-does-react-strictmode-do",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Checks for potential problems in React applications"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Fetches data from APIs"
        },
        {
          "@type": "Answer",
          "text": "Optimizes performance of React apps"
        },
        {
          "@type": "Answer",
          "text": "Styles components globally"
        }
      ],
      "keywords": [
        "React.StrictMode",
        "React debugging",
        "React issues",
        "development tools"
      ],
      "seoMeta": {
        "seoTitle": "React.StrictMode - Identifying Potential Issues",
        "seoDescription": "Learn how React.StrictMode helps identify potential issues in your React applications during development.",
        "seoKeywords": [
          "React.StrictMode",
          "React debugging",
          "React issues",
          "development tools"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What are React portals used for?",
      "text": "What are React portals used for?",
      "url": "https://projectschool.dev/quiz/what-are-react-portals-used-for",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Rendering children outside the DOM hierarchy of their parent"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Managing API calls"
        },
        {
          "@type": "Answer",
          "text": "Optimizing state updates"
        },
        {
          "@type": "Answer",
          "text": "Creating reusable styles"
        }
      ],
      "keywords": [
        "React portals",
        "React DOM",
        "rendering children",
        "React components"
      ],
      "seoMeta": {
        "seoTitle": "React Portals - Rendering Children Outside Parent DOM",
        "seoDescription": "Discover how React portals allow rendering children outside the DOM hierarchy of their parent component.",
        "seoKeywords": [
          "React portals",
          "React DOM",
          "rendering children",
          "React components"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What does the useContext hook do?",
      "text": "What does the useContext hook do?",
      "url": "https://projectschool.dev/quiz/what-does-usecontext-hook-do",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Fetches global state using Context"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Handles API requests"
        },
        {
          "@type": "Answer",
          "text": "Optimizes performance of React apps"
        },
        {
          "@type": "Answer",
          "text": "Handles user events"
        }
      ],
      "keywords": ["useContext", "React state", "global state", "React hooks"],
      "seoMeta": {
        "seoTitle": "React useContext Hook - Fetch Global State",
        "seoDescription": "Understand how the useContext hook in React allows you to fetch global state using Context for efficient data sharing.",
        "seoKeywords": [
          "useContext",
          "React state",
          "global state",
          "React hooks"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is a React ref?",
      "text": "What is a React ref?",
      "url": "https://projectschool.dev/quiz/what-is-react-ref",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "A way to access and manipulate a DOM element directly"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "A built-in method to create new components"
        },
        {
          "@type": "Answer",
          "text": "A hook to manage state"
        },
        {
          "@type": "Answer",
          "text": "A method for routing in React"
        }
      ],
      "keywords": ["React refs", "DOM manipulation", "React hooks", "React"],
      "seoMeta": {
        "seoTitle": "React Refs - Accessing and Manipulating DOM Elements",
        "seoDescription": "Learn about React refs, which provide a way to access and manipulate DOM elements directly without re-rendering.",
        "seoKeywords": [
          "React refs",
          "DOM manipulation",
          "React hooks",
          "React"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the purpose of React.lazy?",
      "text": "What is the purpose of React.lazy?",
      "url": "https://projectschool.dev/quiz/what-is-react-lazy",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To load components lazily for better performance"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To improve app styling"
        },
        {
          "@type": "Answer",
          "text": "To declare asynchronous functions"
        },
        {
          "@type": "Answer",
          "text": "To manage API requests"
        }
      ],
      "keywords": ["React.lazy", "lazy loading", "React performance", "React"],
      "seoMeta": {
        "seoTitle": "React.lazy - Lazy Loading Components",
        "seoDescription": "Understand how React.lazy enables lazy loading of components to improve application performance.",
        "seoKeywords": [
          "React.lazy",
          "lazy loading",
          "React performance",
          "React"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What does the Suspense component do in React?",
      "text": "What does the Suspense component do in React?",
      "url": "https://projectschool.dev/quiz/what-does-suspense-component-do",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Displays a fallback UI while components are loading"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Handles event listeners"
        },
        {
          "@type": "Answer",
          "text": "Manages component state"
        },
        {
          "@type": "Answer",
          "text": "Optimizes component rendering"
        }
      ],
      "keywords": ["React Suspense", "fallback UI", "lazy loading", "React"],
      "seoMeta": {
        "seoTitle": "React Suspense - Fallback UI for Lazy Loading",
        "seoDescription": "Learn how the Suspense component in React allows for displaying fallback UIs during lazy loading.",
        "seoKeywords": [
          "React Suspense",
          "fallback UI",
          "lazy loading",
          "React"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the difference between state and props?",
      "text": "What is the difference between state and props?",
      "url": "https://projectschool.dev/quiz/difference-between-state-and-props",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "State manages local data, while props are passed from parent to child"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "State is read-only, while props can be modified"
        },
        {
          "@type": "Answer",
          "text": "State is used to pass data, while props manage local data"
        },
        {
          "@type": "Answer",
          "text": "State updates the DOM directly, while props don’t"
        }
      ],
      "keywords": [
        "React state",
        "React props",
        "React data management",
        "React"
      ],
      "seoMeta": {
        "seoTitle": "React State vs Props - Key Differences",
        "seoDescription": "Understand the differences between state and props in React, including their usage and characteristics.",
        "seoKeywords": [
          "React state",
          "React props",
          "React data management",
          "React"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is React.StrictMode mainly used for?",
      "text": "What is React.StrictMode mainly used for?",
      "url": "https://projectschool.dev/quiz/what-is-react-strictmode-used-for",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Detecting potential issues in an app"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Styling components"
        },
        {
          "@type": "Answer",
          "text": "Handling forms"
        },
        {
          "@type": "Answer",
          "text": "Rendering large lists efficiently"
        }
      ],
      "keywords": [
        "React.StrictMode",
        "React debugging",
        "React issues",
        "React"
      ],
      "seoMeta": {
        "seoTitle": "React.StrictMode - Detect Potential Issues",
        "seoDescription": "Learn how React.StrictMode helps developers identify potential issues in their React applications.",
        "seoKeywords": [
          "React.StrictMode",
          "React debugging",
          "React issues",
          "React"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the purpose of keys in React lists?",
      "text": "What is the purpose of keys in React lists?",
      "url": "https://projectschool.dev/quiz/purpose-of-keys-in-react-lists",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To enhance performance and track changes in lists"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To style individual items"
        },
        {
          "@type": "Answer",
          "text": "To trigger re-renders"
        },
        {
          "@type": "Answer",
          "text": "To bind event listeners"
        }
      ],
      "keywords": ["React keys", "React lists", "React performance", "React"],
      "seoMeta": {
        "seoTitle": "React Keys - Improve List Performance",
        "seoDescription": "Understand how keys in React help optimize performance and track changes in lists efficiently.",
        "seoKeywords": [
          "React keys",
          "React lists",
          "React performance",
          "React"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is React Fiber?",
      "text": "What is React Fiber?",
      "url": "https://projectschool.dev/quiz/what-is-react-fiber",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "React's reconciliation algorithm"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "A new browser API"
        },
        {
          "@type": "Answer",
          "text": "A tool for managing state"
        },
        {
          "@type": "Answer",
          "text": "A debugging tool for developers"
        }
      ],
      "keywords": [
        "React Fiber",
        "React reconciliation",
        "React performance",
        "React"
      ],
      "seoMeta": {
        "seoTitle": "React Fiber - Reconciliation Algorithm",
        "seoDescription": "Learn about React Fiber, the advanced reconciliation algorithm used by React for efficient updates.",
        "seoKeywords": [
          "React Fiber",
          "React reconciliation",
          "React performance",
          "React"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What does lifting state up mean in React?",
      "text": "What does lifting state up mean in React?",
      "url": "https://projectschool.dev/quiz/what-does-lifting-state-up-mean",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Moving state to a parent component to share with children"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Storing state in the global context"
        },
        {
          "@type": "Answer",
          "text": "Using useState for local state management"
        },
        {
          "@type": "Answer",
          "text": "Managing side effects with hooks"
        }
      ],
      "keywords": [
        "React lifting state",
        "React state sharing",
        "React",
        "React components"
      ],
      "seoMeta": {
        "seoTitle": "React Lifting State Up - Share Data Effectively",
        "seoDescription": "Learn about lifting state up in React to manage shared data between parent and child components.",
        "seoKeywords": [
          "React lifting state",
          "React state sharing",
          "React",
          "React components"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What does the render method do in class components?",
      "text": "What does the render method do in class components?",
      "url": "https://projectschool.dev/quiz/render-method-in-class-components",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Returns the React elements to display"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Defines the initial state of the component"
        },
        {
          "@type": "Answer",
          "text": "Fetches data from APIs"
        },
        {
          "@type": "Answer",
          "text": "Handles side effects like fetching data"
        }
      ],
      "keywords": [
        "React class components",
        "React render",
        "React elements",
        "React"
      ],
      "seoMeta": {
        "seoTitle": "React Class Components - Render Method",
        "seoDescription": "Understand how the render method in React class components returns elements to be displayed.",
        "seoKeywords": [
          "React class components",
          "React render",
          "React elements",
          "React"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the default behavior of the React onClick event?",
      "text": "What is the default behavior of the React onClick event?",
      "url": "https://projectschool.dev/quiz/default-behavior-react-onclick",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Triggers a callback function when clicked"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Executes asynchronously"
        },
        {
          "@type": "Answer",
          "text": "Handles user inputs in forms"
        },
        {
          "@type": "Answer",
          "text": "Automatically updates the component state"
        }
      ],
      "keywords": ["React onClick", "React events", "React callbacks", "React"],
      "seoMeta": {
        "seoTitle": "React onClick - Handle Click Events",
        "seoDescription": "Learn about the default behavior of the React onClick event and how it triggers callback functions.",
        "seoKeywords": [
          "React onClick",
          "React events",
          "React callbacks",
          "React"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What are controlled components in React?",
      "text": "What are controlled components in React?",
      "url": "https://projectschool.dev/quiz/what-are-controlled-components-in-react",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Components whose state is controlled by React"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Components managed entirely by the DOM"
        },
        {
          "@type": "Answer",
          "text": "Components that don’t rely on any hooks"
        },
        {
          "@type": "Answer",
          "text": "Components that directly update the DOM"
        }
      ],
      "keywords": [
        "React controlled components",
        "React forms",
        "React state management"
      ],
      "seoMeta": {
        "seoTitle": "Controlled Components in React Explained",
        "seoDescription": "Understand controlled components in React, their behavior, and how React manages their state.",
        "seoKeywords": [
          "React controlled components",
          "React forms",
          "React state management"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the use of the defaultProps property in React?",
      "text": "What is the use of the defaultProps property in React?",
      "url": "https://projectschool.dev/quiz/what-is-the-use-of-defaultprops-in-react",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To set default values for props"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To manage local state in a component"
        },
        {
          "@type": "Answer",
          "text": "To handle errors during rendering"
        },
        {
          "@type": "Answer",
          "text": "To optimize performance"
        }
      ],
      "keywords": [
        "React defaultProps",
        "React props",
        "Default props in React"
      ],
      "seoMeta": {
        "seoTitle": "React defaultProps - Setting Default Values for Props",
        "seoDescription": "Learn about the defaultProps property in React and how to set default values for props in your components.",
        "seoKeywords": [
          "React defaultProps",
          "React props",
          "Default props in React"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is a higher-order component (HOC) in React?",
      "text": "What is a higher-order component (HOC) in React?",
      "url": "https://projectschool.dev/quiz/what-is-a-higher-order-component-hoc-in-react",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "A function that takes a component and returns a new component"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "A component used for animations"
        },
        {
          "@type": "Answer",
          "text": "A component that renders directly to the DOM"
        },
        {
          "@type": "Answer",
          "text": "A library for managing forms in React"
        }
      ],
      "keywords": [
        "React higher-order components",
        "React HOC",
        "Reusable components in React"
      ],
      "seoMeta": {
        "seoTitle": "React Higher-Order Components (HOC)",
        "seoDescription": "Discover what higher-order components (HOCs) are in React and how they work.",
        "seoKeywords": [
          "React higher-order components",
          "React HOC",
          "Reusable components in React"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the purpose of the componentWillUnmount lifecycle method?",
      "text": "What is the purpose of the componentWillUnmount lifecycle method?",
      "url": "https://projectschool.dev/quiz/what-is-the-purpose-of-componentwillunmount",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To clean up resources like timers or subscriptions"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To handle user input in forms"
        },
        {
          "@type": "Answer",
          "text": "To fetch data when the component is about to unmount"
        },
        {
          "@type": "Answer",
          "text": "To update the state of the component"
        }
      ],
      "keywords": [
        "React lifecycle methods",
        "React componentWillUnmount",
        "Clean up in React"
      ],
      "seoMeta": {
        "seoTitle": "React componentWillUnmount Lifecycle Method",
        "seoDescription": "Learn about the componentWillUnmount lifecycle method in React and how it helps clean up resources.",
        "seoKeywords": [
          "React lifecycle methods",
          "React componentWillUnmount",
          "Clean up in React"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the purpose of the constructor in class components?",
      "text": "What is the purpose of the constructor in class components?",
      "url": "https://projectschool.dev/quiz/what-is-the-purpose-of-the-constructor-in-class-components",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To define initial state and bind methods"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To handle component side effects"
        },
        {
          "@type": "Answer",
          "text": "To fetch data from APIs"
        },
        {
          "@type": "Answer",
          "text": "To create reusable styles"
        }
      ],
      "keywords": [
        "React constructor",
        "Class components in React",
        "State initialization"
      ],
      "seoMeta": {
        "seoTitle": "Constructor in React Class Components",
        "seoDescription": "Understand the role of the constructor in React class components, including initializing state and binding methods.",
        "seoKeywords": [
          "React constructor",
          "Class components in React",
          "State initialization"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What does the getDerivedStateFromProps lifecycle method do?",
      "text": "What does the getDerivedStateFromProps lifecycle method do?",
      "url": "https://projectschool.dev/quiz/what-does-the-getderivedstatefromprops-lifecycle-method-do",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Updates state based on changes in props"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Handles state transitions asynchronously"
        },
        {
          "@type": "Answer",
          "text": "Fetches data from APIs"
        },
        {
          "@type": "Answer",
          "text": "Binds methods to the component"
        }
      ],
      "keywords": [
        "React getDerivedStateFromProps",
        "React props and state",
        "React lifecycle methods"
      ],
      "seoMeta": {
        "seoTitle": "React getDerivedStateFromProps Lifecycle Method",
        "seoDescription": "Learn about the getDerivedStateFromProps lifecycle method in React and how it updates state based on props.",
        "seoKeywords": [
          "React getDerivedStateFromProps",
          "React props and state",
          "React lifecycle methods"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the React Developer Tools extension used for?",
      "text": "What is the React Developer Tools extension used for?",
      "url": "https://projectschool.dev/quiz/what-is-the-react-developer-tools-extension-used-for",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Debugging and inspecting React components"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Testing React apps"
        },
        {
          "@type": "Answer",
          "text": "Styling components in real-time"
        },
        {
          "@type": "Answer",
          "text": "Optimizing React app performance"
        }
      ],
      "keywords": [
        "React Developer Tools",
        "Debugging React",
        "Inspecting React components"
      ],
      "seoMeta": {
        "seoTitle": "React Developer Tools - Debugging React Components",
        "seoDescription": "Explore the features of the React Developer Tools extension, including debugging and inspecting React components.",
        "seoKeywords": [
          "React Developer Tools",
          "Debugging React",
          "Inspecting React components"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the purpose of a fallback UI in React?",
      "text": "What is the purpose of a fallback UI in React?",
      "url": "https://projectschool.dev/quiz/what-is-the-purpose-of-a-fallback-ui-in-react",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To display UI during loading or errors"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To handle user input errors"
        },
        {
          "@type": "Answer",
          "text": "To render a default page when APIs fail"
        },
        {
          "@type": "Answer",
          "text": "To apply default props to components"
        }
      ],
      "keywords": [
        "React fallback UI",
        "Error boundaries in React",
        "React error handling"
      ],
      "seoMeta": {
        "seoTitle": "Fallback UI in React - Handling Loading and Errors",
        "seoDescription": "Learn how to use fallback UI in React to handle loading states and display error messages effectively.",
        "seoKeywords": [
          "React fallback UI",
          "Error boundaries in React",
          "React error handling"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What does ReactDOM.render do?",
      "text": "What does ReactDOM.render do?",
      "url": "https://projectschool.dev/quiz/what-does-reactdom-render-do",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "Renders a React element into the DOM"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "Manages local state for a component"
        },
        {
          "@type": "Answer",
          "text": "Handles lifecycle methods"
        },
        {
          "@type": "Answer",
          "text": "Performs server-side rendering"
        }
      ],
      "keywords": [
        "ReactDOM.render",
        "Rendering React elements",
        "React DOM manipulation"
      ],
      "seoMeta": {
        "seoTitle": "ReactDOM.render - Rendering React Elements",
        "seoDescription": "Understand the purpose of ReactDOM.render and how it renders React elements into the DOM.",
        "seoKeywords": [
          "ReactDOM.render",
          "Rendering React elements",
          "React DOM manipulation"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the purpose of React's reconciliation process?",
      "text": "What is the purpose of React's reconciliation process?",
      "url": "https://projectschool.dev/quiz/what-is-the-purpose-of-reacts-reconciliation-process",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To update and render only the necessary changes to the DOM"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To compare versions of React apps"
        },
        {
          "@type": "Answer",
          "text": "To fetch data more efficiently"
        },
        {
          "@type": "Answer",
          "text": "To manage user inputs in forms"
        }
      ],
      "keywords": [
        "React reconciliation",
        "React DOM updates",
        "React performance"
      ],
      "seoMeta": {
        "seoTitle": "React Reconciliation - Optimize DOM Updates",
        "seoDescription": "Understand the purpose of React's reconciliation process in optimizing DOM updates for better performance.",
        "seoKeywords": [
          "React reconciliation",
          "React DOM updates",
          "React performance"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the main purpose of the useCallback hook?",
      "text": "What is the main purpose of the useCallback hook?",
      "url": "https://projectschool.dev/quiz/what-is-the-main-purpose-of-the-usecallback-hook",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To memoize functions and avoid unnecessary re-creations"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To manage state across different components"
        },
        {
          "@type": "Answer",
          "text": "To handle side effects in functional components"
        },
        {
          "@type": "Answer",
          "text": "To trigger re-renders when props change"
        }
      ],
      "keywords": [
        "React useCallback",
        "React hooks",
        "React performance optimization"
      ],
      "seoMeta": {
        "seoTitle": "React useCallback Hook - Memoize Functions",
        "seoDescription": "Learn how the useCallback hook in React helps memoize functions to improve performance.",
        "seoKeywords": [
          "React useCallback",
          "React hooks",
          "React performance optimization"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the purpose of the useContext hook?",
      "text": "What is the purpose of the useContext hook?",
      "url": "https://projectschool.dev/quiz/what-is-the-purpose-of-the-usecontext-hook",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To allow state sharing between components without passing props"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To fetch data from an API"
        },
        {
          "@type": "Answer",
          "text": "To optimize performance by caching values"
        },
        {
          "@type": "Answer",
          "text": "To handle component lifecycle methods"
        }
      ],
      "keywords": ["React useContext", "React state sharing", "React hooks"],
      "seoMeta": {
        "seoTitle": "React useContext Hook - Share State",
        "seoDescription": "Discover how the useContext hook allows state sharing across components without prop drilling.",
        "seoKeywords": [
          "React useContext",
          "React state sharing",
          "React hooks"
        ]
      }
    },
    {
      "@type": "Question",
      "name": "What is the significance of the key prop in React lists?",
      "text": "What is the significance of the key prop in React lists?",
      "url": "https://projectschool.dev/quiz/what-is-the-significance-of-the-key-prop-in-react-lists",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "It helps React identify which items have changed, added, or removed"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "It determines the component's styling"
        },
        {
          "@type": "Answer",
          "text": "It defines the component's default props"
        },
        {
          "@type": "Answer",
          "text": "It is used to store component data persistently"
        }
      ],
      "keywords": ["React key prop", "React lists", "React performance"],
      "seoMeta": {
        "seoTitle": "React Key Prop - Identify List Items",
        "seoDescription": "Learn why the key prop in React lists is essential for identifying changed, added, or removed items.",
        "seoKeywords": ["React key prop", "React lists", "React performance"]
      }
    },
    {
      "@type": "Question",
      "name": "What is ReactDOMServer used for?",
      "text": "What is ReactDOMServer used for?",
      "url": "https://projectschool.dev/quiz/what-is-reactdomserver-used-for",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "To perform server-side rendering of React components"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "To interact with the DOM"
        },
        {
          "@type": "Answer",
          "text": "To handle React state on the server"
        },
        {
          "@type": "Answer",
          "text": "To bind event listeners on the client"
        }
      ],
      "keywords": ["ReactDOMServer", "server-side rendering", "React SSR"],
      "seoMeta": {
        "seoTitle": "ReactDOMServer - Server-Side Rendering",
        "seoDescription": "Understand the role of ReactDOMServer in enabling server-side rendering for React components.",
        "seoKeywords": ["ReactDOMServer", "server-side rendering", "React SSR"]
      }
    },
    {
      "@type": "Question",
      "name": "What does the useReducer hook do in React?",
      "text": "What does the useReducer hook do in React?",
      "url": "https://projectschool.dev/quiz/what-does-the-usereducer-hook-do-in-react",
      "acceptedAnswer": {
        "@type": "Answer",
        "text": "It is used to handle large state updates in a performant way"
      },
      "answerCount": 4,
      "suggestedAnswer": [
        {
          "@type": "Answer",
          "text": "It is used to fetch data from APIs"
        },
        {
          "@type": "Answer",
          "text": "It is used to store immutable data"
        },
        {
          "@type": "Answer",
          "text": "It helps in component styling and animations"
        }
      ],
      "keywords": ["React useReducer", "React hooks", "React state management"],
      "seoMeta": {
        "seoTitle": "React useReducer Hook - Manage Complex States",
        "seoDescription": "Learn how the useReducer hook in React simplifies managing large and complex state updates.",
        "seoKeywords": [
          "React useReducer",
          "React hooks",
          "React state management"
        ]
      }
    },
    {
        "@type": "Question",
        "name": "How do you pass data from a child component to a parent component in React?",
        "text": "How do you pass data from a child component to a parent component in React?",
        "url": "https://projectschool.dev/quiz/how-do-you-pass-data-from-a-child-component-to-a-parent-component-in-react",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "By passing a callback function as a prop from parent to child"
        },
        "answerCount": 4,
        "suggestedAnswer": [
          {
            "@type": "Answer",
            "text": "Using the `useState` hook"
          },
          {
            "@type": "Answer",
            "text": "By using React Context"
          },
          {
            "@type": "Answer",
            "text": "By rendering JSX inside the parent component"
          }
        ],
        "keywords": ["React child to parent", "React props", "React data flow"],
        "seoMeta": {
          "seoTitle": "React Child to Parent Data Transfer",
          "seoDescription": "Discover how to pass data from a child component to a parent component in React using callback props.",
          "seoKeywords": ["React child to parent", "React props", "React data flow"]
        }
      },
      {
        "@type": "Question",
        "name": "What is the difference between React’s useEffect and useLayoutEffect hooks?",
        "text": "What is the difference between React’s useEffect and useLayoutEffect hooks?",
        "url": "https://projectschool.dev/quiz/what-is-the-difference-between-reacts-useeffect-and-uselayouteffect-hooks",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "useLayoutEffect runs synchronously after all DOM mutations"
        },
        "answerCount": 4,
        "suggestedAnswer": [
          {
            "@type": "Answer",
            "text": "useEffect runs synchronously, while useLayoutEffect runs asynchronously"
          },
          {
            "@type": "Answer",
            "text": "useEffect handles form inputs, while useLayoutEffect handles rendering"
          },
          {
            "@type": "Answer",
            "text": "useLayoutEffect is used only for server-side rendering"
          }
        ],
        "keywords": ["React useEffect", "React useLayoutEffect", "React hooks"],
        "seoMeta": {
          "seoTitle": "React useEffect vs. useLayoutEffect",
          "seoDescription": "Understand the differences between useEffect and useLayoutEffect hooks in React and their use cases.",
          "seoKeywords": ["React useEffect", "React useLayoutEffect", "React hooks"]
        }
      },
      {
        "@type": "Question",
        "name": "What is the role of the componentDidMount lifecycle method in React?",
        "text": "What is the role of the componentDidMount lifecycle method in React?",
        "url": "https://projectschool.dev/quiz/what-is-the-role-of-the-componentdidmount-lifecycle-method-in-react",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "To fetch data or perform operations after the component mounts"
        },
        "answerCount": 4,
        "suggestedAnswer": [
          {
            "@type": "Answer",
            "text": "To update the component state"
          },
          {
            "@type": "Answer",
            "text": "To manage side effects when props change"
          },
          {
            "@type": "Answer",
            "text": "To handle event listeners and remove them on unmount"
          }
        ],
        "keywords": ["React componentDidMount", "React lifecycle methods", "React components"],
        "seoMeta": {
          "seoTitle": "React componentDidMount - Lifecycle Method",
          "seoDescription": "Learn the role of the componentDidMount lifecycle method in React for post-mount operations.",
          "seoKeywords": ["React componentDidMount", "React lifecycle methods", "React components"]
        }
      },
      {
        "@type": "Question",
        "name": "What does the React context API allow you to do?",
        "text": "What does the React context API allow you to do?",
        "url": "https://projectschool.dev/quiz/what-does-the-react-context-api-allow-you-to-do",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "It allows you to pass data across the app without using props"
        },
        "answerCount": 4,
        "suggestedAnswer": [
          {
            "@type": "Answer",
            "text": "It allows you to store state in a global store"
          },
          {
            "@type": "Answer",
            "text": "It provides a built-in state management system"
          },
          {
            "@type": "Answer",
            "text": "It enables direct DOM manipulation"
          }
        ],
        "keywords": ["React Context API", "React state sharing", "React props"],
        "seoMeta": {
          "seoTitle": "React Context API - Simplify Data Sharing",
          "seoDescription": "Explore how the React Context API simplifies data sharing across your application.",
          "seoKeywords": ["React Context API", "React state sharing", "React props"]
        }
      },
      {
        "@type": "Question",
        "name": "What is the purpose of the useLayoutEffect hook?",
        "text": "What is the purpose of the useLayoutEffect hook?",
        "url": "https://projectschool.dev/quiz/what-is-the-purpose-of-the-uselayouteffect-hook",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "To read layout and paint information from the DOM"
        },
        "answerCount": 4,
        "suggestedAnswer": [
          {
            "@type": "Answer",
            "text": "To handle asynchronous side effects in functional components"
          },
          {
            "@type": "Answer",
            "text": "To perform DOM mutations and update the UI immediately"
          },
          {
            "@type": "Answer",
            "text": "To manage error boundaries in React components"
          }
        ],
        "keywords": ["useLayoutEffect hook", "React hooks", "DOM layout", "React performance"],
        "seoMeta": {
          "seoTitle": "Understanding the useLayoutEffect Hook in React",
          "seoDescription": "Learn about the useLayoutEffect hook in React, its purpose, and how it is used to read layout and paint information from the DOM.",
          "seoKeywords": ["useLayoutEffect hook", "React hooks", "DOM layout", "React performance"]
        }
      },
      {
        "@type": "Question",
        "name": "What is the difference between state and props in React?",
        "text": "What is the difference between state and props in React?",
        "url": "https://projectschool.dev/quiz/state-vs-props",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "State is internal to a component, while props are passed from a parent"
        },
        "answerCount": 4,
        "suggestedAnswer": [
          {
            "@type": "Answer",
            "text": "State is read-only, while props can be modified"
          },
          {
            "@type": "Answer",
            "text": "State is used to fetch data, while props are used to manage events"
          },
          {
            "@type": "Answer",
            "text": "State and props are interchangeable"
          }
        ],
        "keywords": ["React state", "React props", "state vs props", "React concepts"],
        "seoMeta": {
          "seoTitle": "React State vs Props: Key Differences Explained",
          "seoDescription": "Learn the fundamental differences between state and props in React, including their purposes and how they are used in components.",
          "seoKeywords": ["React state", "React props", "state vs props", "React concepts"]
        }
      },
      {
        "@type": "Question",
        "name": "What is a controlled component in React?",
        "text": "What is a controlled component in React?",
        "url": "https://projectschool.dev/quiz/controlled-component",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "A component whose form elements are controlled by React state"
        },
        "answerCount": 4,
        "suggestedAnswer": [
          {
            "@type": "Answer",
            "text": "A component that controls the state of other components"
          },
          {
            "@type": "Answer",
            "text": "A component that manages its own state"
          },
          {
            "@type": "Answer",
            "text": "A component that directly modifies the DOM"
          }
        ],
        "keywords": ["React controlled components", "form handling in React", "React forms"],
        "seoMeta": {
          "seoTitle": "What Are Controlled Components in React?",
          "seoDescription": "Understand controlled components in React and how they allow form elements to be controlled by state.",
          "seoKeywords": ["React controlled components", "form handling in React", "React forms"]
        }
      },
      {
        "@type": "Question",
        "name": "What is the significance of the React.memo function?",
        "text": "What is the significance of the React.memo function?",
        "url": "https://projectschool.dev/quiz/react-memo",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "It memoizes a component to prevent unnecessary re-renders"
        },
        "answerCount": 4,
        "suggestedAnswer": [
          {
            "@type": "Answer",
            "text": "It allows components to fetch data efficiently"
          },
          {
            "@type": "Answer",
            "text": "It is used to manage state globally"
          },
          {
            "@type": "Answer",
            "text": "It binds lifecycle methods to functional components"
          }
        ],
        "keywords": ["React.memo", "optimize rendering", "React performance tips"],
        "seoMeta": {
          "seoTitle": "Understanding React.memo for Optimized Rendering",
          "seoDescription": "Learn how React.memo helps optimize rendering performance by memoizing functional components.",
          "seoKeywords": ["React.memo", "optimize rendering", "React performance tips"]
        }
      },
      {
        "@type": "Question",
        "name": "What does the StrictMode component do in React?",
        "text": "What does the StrictMode component do in React?",
        "url": "https://projectschool.dev/quiz/react-strictmode",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "It highlights potential issues in an application during development"
        },
        "answerCount": 4,
        "suggestedAnswer": [
          {
            "@type": "Answer",
            "text": "It disables deprecated lifecycle methods"
          },
          {
            "@type": "Answer",
            "text": "It ensures the app works in strict type-checking mode"
          },
          {
            "@type": "Answer",
            "text": "It provides additional performance optimizations"
          }
        ],
        "keywords": ["React StrictMode", "React debugging tools", "React development"],
        "seoMeta": {
          "seoTitle": "React StrictMode: Debugging and Best Practices",
          "seoDescription": "Discover how React's StrictMode helps developers identify potential issues during development.",
          "seoKeywords": ["React StrictMode", "React debugging tools", "React development"]
        }
      },
      {
        "@type": "Question",
        "name": "How can you prevent a component from re-rendering unnecessarily?",
        "text": "How can you prevent a component from re-rendering unnecessarily?",
        "url": "https://projectschool.dev/quiz/prevent-re-render",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "By using React.memo or shouldComponentUpdate"
        },
        "answerCount": 4,
        "suggestedAnswer": [
          {
            "@type": "Answer",
            "text": "By using the useEffect hook"
          },
          {
            "@type": "Answer",
            "text": "By wrapping it with a Fragment"
          },
          {
            "@type": "Answer",
            "text": "By using the Context API"
          }
        ],
        "keywords": ["prevent re-rendering", "React.memo", "shouldComponentUpdate", "React optimization"],
        "seoMeta": {
          "seoTitle": "Prevent Unnecessary Re-Renders in React",
          "seoDescription": "Learn how to use React.memo and shouldComponentUpdate to optimize React app performance.",
          "seoKeywords": ["prevent re-rendering", "React.memo", "shouldComponentUpdate", "React optimization"]
        }
      },
      {
        "@type": "Question",
        "name": "What is the purpose of the Fragment component in React?",
        "text": "What is the purpose of the Fragment component in React?",
        "url": "https://projectschool.dev/quiz/what-is-the-purpose-of-the-fragment-component-in-react",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "To group multiple elements without adding extra nodes to the DOM"
        },
        "answerCount": 4,
        "suggestedAnswer": [
          {
            "@type": "Answer",
            "text": "To apply styling to multiple components"
          },
          {
            "@type": "Answer",
            "text": "To handle asynchronous rendering"
          },
          {
            "@type": "Answer",
            "text": "To manage component states and props"
          }
        ],
        "keywords": ["React Fragment", "grouping elements", "React DOM optimization"],
        "seoMeta": {
          "seoTitle": "React Fragment: Grouping Without Extra DOM Nodes",
          "seoDescription": "Understand how React Fragments help group multiple elements without cluttering the DOM.",
          "seoKeywords": ["React Fragment", "grouping elements", "React DOM optimization"]
        }
      },
      {
        "@type": "Question",
        "name": "What is the role of React's default props?",
        "text": "What is the role of React's default props?",
        "url": "https://projectschool.dev/quiz/what-is-the-role-of-reacts-default-props",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "To provide default values for props if no value is passed"
        },
        "answerCount": 4,
        "suggestedAnswer": [
          {
            "@type": "Answer",
            "text": "To validate the props passed to a component"
          },
          {
            "@type": "Answer",
            "text": "To optimize performance during rendering"
          },
          {
            "@type": "Answer",
            "text": "To replace the need for PropTypes"
          }
        ],
        "keywords": ["React default props", "fallback props in React", "React component defaults"],
        "seoMeta": {
          "seoTitle": "React Default Props: Ensuring Fallback Values",
          "seoDescription": "Learn how default props in React provide fallback values for components when no props are passed.",
          "seoKeywords": ["React default props", "fallback props in React", "React component defaults"]
        }
      },
      {
        "@type": "Question",
        "name": "What is the purpose of the Error Boundary in React?",
        "text": "What is the purpose of the Error Boundary in React?",
        "url": "https://projectschool.dev/quiz/what-is-the-purpose-of-the-error-boundary-in-react",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "To catch and handle errors during rendering or in lifecycle methods"
        },
        "answerCount": 4,
        "suggestedAnswer": [
          {
            "@type": "Answer",
            "text": "To manage state and props across components"
          },
          {
            "@type": "Answer",
            "text": "To optimize rendering performance"
          },
          {
            "@type": "Answer",
            "text": "To fetch and display fallback data"
          }
        ],
        "keywords": ["React Error Boundaries", "error handling", "React fallback UI"],
        "seoMeta": {
          "seoTitle": "React Error Boundaries: Handling UI Failures",
          "seoDescription": "Understand how Error Boundaries in React catch rendering errors and provide fallback UI.",
          "seoKeywords": ["React Error Boundaries", "error handling", "React fallback UI"]
        }
      },
      {
        "@type": "Question",
        "name": "What is the purpose of React's useRef hook?",
        "text": "What is the purpose of React's useRef hook?",
        "url": "https://projectschool.dev/quiz/what-is-the-purpose-of-reacts-useref-hook",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "To create a reference to a DOM element or persist a mutable value"
        },
        "answerCount": 4,
        "suggestedAnswer": [
          {
            "@type": "Answer",
            "text": "To manage local state within a component"
          },
          {
            "@type": "Answer",
            "text": "To trigger re-renders when the value changes"
          },
          {
            "@type": "Answer",
            "text": "To validate props passed to child components"
          }
        ],
        "keywords": ["React useRef", "DOM references", "React mutable values"],
        "seoMeta": {
          "seoTitle": "React useRef Hook: Managing DOM and Mutable Values",
          "seoDescription": "Learn how the useRef hook in React is used to reference DOM elements and persist mutable values.",
          "seoKeywords": ["React useRef", "DOM references", "React mutable values"]
        }
      },
      {
        "@type": "Question",
        "name": "What is the virtual DOM in React?",
        "text": "What is the virtual DOM in React?",
        "url": "https://projectschool.dev/quiz/what-is-the-virtual-dom-in-react",
        "acceptedAnswer": {
          "@type": "Answer",
          "text": "A copy of the browser DOM that React uses to track changes"
        },
        "answerCount": 4,
        "suggestedAnswer": [
          {
            "@type": "Answer",
            "text": "An abstraction layer for managing animations"
          },
          {
            "@type": "Answer",
            "text": "A way to manage global state in React"
          },
          {
            "@type": "Answer",
            "text": "A separate DOM that is stored in memory for performance"
          }
        ],
        "keywords": ["React virtual DOM", "DOM optimization", "React performance"],
        "seoMeta": {
          "seoTitle": "React Virtual DOM: Enhancing App Performance",
          "seoDescription": "Learn how the virtual DOM in React helps improve performance by efficiently tracking and applying changes.",
          "seoKeywords": ["React virtual DOM", "DOM optimization", "React performance"]
        }
      }
      
      
      
      
      
      
      
  ]
}
